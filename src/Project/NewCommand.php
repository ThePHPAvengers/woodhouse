<?php
namespace Woodhouse\Project;

use Woodhouse\Command\Command;
use Woodhouse\Project\Task\Factory\BootstrapImportationTaskFactory;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class NewCommand
 *
 * @package Woodhouse\Project
 * @author  RaphaÃ«l Lefebvre <raphael@raphaellefebvre.be>
 */
class NewCommand extends Command
{

    /**
     *
     */
    protected function configure()
    {
        $this
            ->setName('new')
            ->setDescription('Generates a new project')
            ->addArgument(
                'bootstrap',
                InputArgument::OPTIONAL,
                'package name'
            )
            ->addArgument(
                'version',
                InputArgument::OPTIONAL,
                'package version'
            )
            ->addArgument(
                'source',
                InputArgument::OPTIONAL,
                'package source'
            )
            ->addOption(
                'dir',
                'd',
                InputOption::VALUE_REQUIRED,
                'Specify a custom directory path for the project. By default, project will be installed in the same directory as the project name.'
            )
            ->addOption(
                'no-module',
                'm',
                InputOption::VALUE_NONE,
                'Avoid to run the modules'
            )
            ->setHelp(file_get_contents($this->getService('config')['doc.path'].'new.console'));
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     * @return void
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $microTime = microtime(true);
        $this->getTask()->execute($input, $output);
        $output->writeln(
            'Generated by Woodhouse in ' . number_format(microtime(true) - $microTime, 2, '.', ' ') . ' sec. Banzai!'
        );
    }

    /**
     * @return \Woodhouse\Task\ITask
     */
    private function getTask()
    {
        $factory = new BootstrapImportationTaskFactory();
        return $factory->create($this->getServices());
    }
}

